############################################################
# Dockerfile to build Python WSGI Application Containers
# Based on Ubuntu
# Hints at:
#	https://www.digitalocean.com/community/tutorials/docker-explained-how-to-containerize-python-web-applications
#	https://github.com/MarCialR/flask_docker/blob/master/Dockerfile
############################################################

# Set the base image to Ubuntu
FROM ubuntu

# File Author / Maintainer
MAINTAINER MarCialR <marcialemilio@gmail.com>


# create user
RUN groupadd web
RUN useradd -d /home/bottle -m bottle

# Add the application resources URL
RUN echo "deb http://archive.ubuntu.com/ubuntu/ $(lsb_release -sc) main universe" >> /etc/apt/sources.list
#RUN echo "deb http://archive.ubuntu.com/ubuntu precise main universe" > /etc/apt/sources.list

# Update the sources list
RUN apt-get update
RUN apt-get upgrade -y

# Install basic applications
RUN apt-get install -y tar git curl nano wget dialog net-tools build-essential

# Install Python and Basic Python Tools
#RUN apt-get install -y python python-dev python-distribute python-pip
RUN apt-get install python-pip -y

# Copy the application folder inside the container
ADD /my_application1 /home/panic_app

# Get pip to download and install requirements:
RUN pip install -r /home/panic_app/requirements.txt



# Expose ports
EXPOSE 8080


# in case you'd prefer to use links, expose the port
EXPOSE 8080
ENTRYPOINT ["/usr/bin/python", "/home/panic_app/myapp.py"]
USER bottle


# Set the default directory where CMD will execute
#WORKDIR /panic_app

# Set the default command to execute    
# when creating a new container
# i.e. using CherryPy to serve the application
#CMD python myapp.py

